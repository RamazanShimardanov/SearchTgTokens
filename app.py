import re
import time
import json
from github import Github
from datetime import datetime
import logging
from config import (
    GITHUB_TOKENS,
    SEARCH_SETTINGS,
    TELEGRAM_REGEX,
    TARGET_FILES,
    LOG_SETTINGS
)

class GitHubTokenScanner:
    def __init__(self):
        self._setup_logging()
        self.gh = Github(GITHUB_TOKENS[0]) if GITHUB_TOKENS else None
        self.current_repo = 0
        self.found_count = 0
        self.output_file = "found_tokens.json"  

    def _setup_logging(self):
        logging.basicConfig(
            level=getattr(logging, LOG_SETTINGS["level"]),
            format=LOG_SETTINGS["format"],
            filename=LOG_SETTINGS["file"]
        )
        self.logger = logging.getLogger(__name__)

    def scan_repositories(self):
        print("=== –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ ===")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {SEARCH_SETTINGS['query']}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {SEARCH_SETTINGS['max_repos']}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_file}\n")

        found_tokens = set()
        try:
            repos = self.gh.search_repositories(
                SEARCH_SETTINGS["query"],
                sort="updated",
                order="desc"
            )

            for repo in repos[:SEARCH_SETTINGS["max_repos"]]:
                self.current_repo += 1
                repo_info = f"{self.current_repo}. {repo.full_name}"
                
                tokens = self._scan_repository(repo)
                if tokens:
                    self.found_count += 1
                    found_tokens.update(tokens)
                    status = "‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: " + ", ".join(t[:10] + "..." for t in tokens)
                    self._save_tokens(tokens, repo.full_name)  
                else:
                    status = "‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                print(f"{repo_info.ljust(60)} {status}")
                time.sleep(SEARCH_SETTINGS["request_delay"])

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        self._save_final_results(found_tokens)  
        return found_tokens

    def _scan_repository(self, repo):
        found_tokens = set()
        try:
            contents = repo.get_contents("")
            for content in contents:
                if content.name.lower() in [f.lower() for f in TARGET_FILES]:
                    try:
                        file_content = content.decoded_content.decode('utf-8')
                        tokens = re.findall(TELEGRAM_REGEX, file_content)
                        if tokens:
                            found_tokens.update(tokens)
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –≤ {repo.full_name}/{content.name}")
                    except Exception as e:
                        self.logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {repo.full_name}/{content.name}: {str(e)}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo.full_name}: {str(e)}")
        
        return found_tokens

    def _save_tokens(self, tokens, repo_name):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª"""
        try:
            data = []
            try:
    
                with open(self.output_file, 'r') as f:
                    data = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                pass
            
         
            for token in tokens:
                data.append({
                    "token": token,
                    "repository": repo_name,
                    "timestamp": datetime.now().isoformat()
                })
            
    
            with open(self.output_file, 'w') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")

    def _save_final_results(self, tokens):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if not tokens:
            return
            
        try:
            result = {
                "metadata": {
                    "total_repositories": self.current_repo,
                    "repositories_with_tokens": self.found_count,
                    "unique_tokens": len(tokens),
                    "scan_date": datetime.now().isoformat(),
                    "search_query": SEARCH_SETTINGS["query"]
                },
                "tokens": list(tokens)  
            }
            
            with open(self.output_file, 'w') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
                
            print(f"\n–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.output_file}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")


if __name__ == "__main__":
    start_time = datetime.now()
    scanner = GitHubTokenScanner()
    
    print("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ Telegram —Ç–æ–∫–µ–Ω–æ–≤...")
    tokens = scanner.scan_repositories()
    
    duration = datetime.now() - start_time
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {scanner.current_repo}")
    print(f"–†–µ–ø–æ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {scanner.found_count}")
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
    
    if tokens:
        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:")
        for i, token in enumerate(list(tokens)[-5:], 1): 
            print(f"{i}. {token[:15]}...")  
    else:
        print("\n–¢–æ–∫–µ–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")